import noble from '@abandonware/noble';
import decodeCommand from './decodeCommand.js';
import { Buffer } from 'buffer';

const SLOW_GLOW = '5450f20ba7a246464646bb590000000000000000';

const DIM_75 = '5451ec15b9b0ba3c3c3c7c9e0000000000000000';
const DIM_75_2 = '5451ff06aaa3a92d2d2dbc5e0000000000000000';
const DIM_75_3 = '54510ff65a53590808081efc0000000000000000';

const DIM_50_1 = '5451bb42eee7ee47474791730000000000000000';

const DIM_100_1 = '5451af56faf3f8dbdbdb8d6f0000000000000000';

const COL_WHITE = '545128d17e7e616d6d6d9d7f0000000000000000';
const COL_WHITE2 = '5451629b34342b545454ad4f0000000000000000';

const COL_YELLOW1 = '54510bf25d5d5f1d1d1dfe1c0000000000000000';
const COL_YELLOW2 = '545155ac0303019e9e9e40a20000000000000000';

const COL_MID1 = '5451e811bebeb2e8e8e829cb0000000000000000';
const COL_MID2 = '54512cd57a7a763232324eac0000000000000000';

const SCH1 = '5450b54ce3e0383838387c9e0000000000000000';
const SCH2 = '5450dc258a890a0a0a0aeb090000000000000000';

const SEQ1 = '545068913d3f8b8b8b8b9c7e0000000000000000';
const SEQ2 = '5450f60fa3a1f7f7f7f79a780000000000000000';
const SEQ3 = '545047be1210bebebebed3310000000000000000';
const SEQ4 = '54502ad37f7d2d2d2d2dbc5e0000000000000000';
const SEQ5 = '5450fc05a9abd9d9d9d934d60000000000000000';
const SEQ6 = '5450ad54f8fa20202020ee0c0000000000000000';
const SEQ7 = '5450847dd1d3070707077b990000000000000000';
const SEQ8 = '5450a059f5f719191919ca280000000000000000';
const SEQ9 = '54501ce5494b7575757550b20000000000000000'; // 9 is with timer from 20:00 to 00:00

const SEQ_BIN = '01010100 01010000 01101000 10010001 00111101 00111111 10001011 10001011 10001011 10001011 10011100 01111110 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000';
const SE2_BIN = '01010100 01010000 11110110 00001111 10100011 10100001 11110111 11110111 11110111 11110111 10011010 01111000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000';
const SE3_BIN = '01010100 01010000 01000111 10111110 00010010 00010000 10111110 10111110 10111110 10111110 11010011 00110001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000';
const SE4_BIN = '01010100 01010000 00101010 11010011 01111111 01111101 00101101 00101101 00101101 00101101 10111100 01011110 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000';
const SE5_BIN = '01010100 01010000 11111100 00000101 10101001 10101011 11011001 11011001 11011001 11011001 00110100 11010110 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000';
const SE6_BIN = '01010100 01010000 10101101 01010100 11111000 11111010 00100000 00100000 00100000 00100000 11101110 00001100 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000';
const SE7_BIN = '01010100 01010000 10000100 01111101 11010001 11010011 00000111 00000111 00000111 00000111 01111011 10011001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000';
const SE8_BIN = '01010100 01010000 10100000 01011001 11110101 11110111 00011001 00011001 00011001 00011001 11001010 00101000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000';
const SE9_BIN = '01010100 01010000 00011100 11100101 01001001 01001011 01110101 01110101 01110101 01110101 01010000 10110010 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000';

const D075_BIN1 = '01010100 01010001 11101100 00010101 10111001 10110000 10111010 00111100 00111100 00111100 01111100 10011110 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000';
const D075_BIN2 = '01010100 01010001 11111111 00000110 10101010 10100011 10101001 00101101 00101101 00101101 10111100 01011110 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000';
const D075_BIN3 = '01010100 01010001 00001111 11110110 01011010 01010011 01011001 00001000 00001000 00001000 00011110 11111100 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000';

const D050_BIN1 = '01010100 01010001 10111011 01000010 11101110 11100111 11101110 01000111 01000111 01000111 10010001 01110011 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000';

const D100_BIN1 = '01010100 01010001 10101111 01010110 11111010 11110011 11111000 11011011 11011011 11011011 10001101 01101111 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000';

const COL_WHITE1_BIN = '01010100 01010001 00101000 11010001 01111110 01111110 01100001 01101101 01101101 01101101 10011101 01111111 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000';
const COL_WHITE2_BIN = '01010100 01010001 01100010 10011011 00110100 00110100 00101011 01010100 01010100 01010100 10101101 01001111 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000';

const COL_YELLOW1_BIN = '01010100 01010001 00001011 11110010 01011101 01011101 01011111 00011101 00011101 00011101 11111110 00011100 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000';
const COL_YELLOW2_BIN = '01010100 01010001 01010101 10101100 00000011 00000011 00000001 10011110 10011110 10011110 01000000 10100010 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000';

const COL_MID1_BIN = '0101010001010001111010000001000110111110101111101011001011101000111010001110100000101001110010110000000000000000000000000000000000000000000000000000000000000000';
const COL_MID2_BIN = '0101010001010001001011001101010101111010011110100111011000110010001100100011001001001110101011000000000000000000000000000000000000000000000000000000000000000000';

const SCH1_BIN = '01010100 01010000 10110101 01001100 11100011 11100000 00111000 00111000 00111000 00111000 01111100 10011110 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000';
const SCH2_BIN = '01010100 01010000 11011100 00100101 10001010 10001001 00001010 00001010 00001010 00001010 11101011 00001001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000';


function getActionName(command) {
	if (command === 'dim') {
		return '-----Dimming light to 75';
	}
	if (command === 'glow') {
		return '-----Glow';
	}
	if (command === 'seq') {
		return '-----Sequential';
	}
	if (command === 'col-yellow') {
		return '-----Color: yellow';
	}

	if (command === 'col-mid') {
		return '-----Color: middle';
	}
	if (command === 'sch') {
		return '-----Self change';
	}

}

function getActionBuffer(command) {
	if (command === 'dim') {
		return DIM_75;
	}
	if (command === 'glow') {
		return SLOW_GLOW;
	}
	if (command === 'seq') {
		return SEQ8;
	}
	if (command === 'col-yellow') {
		return COL_YELLOW2;
	}
	if (command === 'col-mid') {
		return COL_MID2;
	}
	if (command === 'sch') {
		return SCH2;
	}

}

function convertBufferToBinaryString(buf, len) {
	let result = [];
	for (let i = 0; i < len; i++) {
		result.push(buf[i].toString(2).padStart(8, '0'));
	}
	return result.join(' ');
}

let foundPeripheral = null;


async function readAndSendAction(peripheral, action) {
	console.log('before connect');
	await peripheral.connectAsync();
	console.log('after connect');

	const { characteristics } = await peripheral.discoverSomeServicesAndCharacteristicsAsync(['1000'], ['1001']);
	//console.log('characteristics', characteristics);

	const char1 = (await characteristics[0].readAsync());
	//const char3 = (await characteristics[2].readAsync());

	console.log(`${peripheral.address} (${peripheral.advertisement.localName})`);
	console.log(`Characteristic first read`, char1);
	console.log('Binary:', convertBufferToBinaryString(char1, char1.length));
	decodeCommand(char1);

	const buffer = Buffer.from(getActionBuffer(action), 'hex');
	console.log('will send buffer', buffer);
	console.log(getActionName(action));
	await characteristics[0].writeAsync(buffer, true);


	const char2 = (await characteristics[0].readAsync());
	console.log(`Characteristic second read`, char2);
	console.log('Binary:', convertBufferToBinaryString(char2, char2.length));


	peripheral.on('disconnect', () => console.log('disconnected'));

	await peripheral.disconnectAsync();
	console.log('disconnectAsync in discover');
}

export async function doAction(action) {


	let currentState = noble.state;
	console.log('current state: ', currentState);
	console.log('foundPeripheral', foundPeripheral);
	if(foundPeripheral !== null) {
		console.log('manually starting scanning');
		await readAndSendAction(foundPeripheral, action);
	} else {
		noble.on('stateChange', async (state) => {
			console.log('stateChange', state);
			if (state === 'poweredOn') {
				await noble.startScanningAsync(['1000'], false);
			} else {
				await noble.stopScanningAsync();
				console.log('stopScanningAsync in stateChange');
			}
		});
	}
	
	noble.on('discover', async (p) => {
		console.log('localName:', p.advertisement.localName);
		foundPeripheral = p;
		await readAndSendAction(p, action);
		
		await noble.stopScanningAsync();
	
	});

}
